//
// FX Version: fx_5_0
//
// 2 local object(s)
//
Texture2D gSpriteTex;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 SpriteTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- vin.PosNdc.x; v0.y <- vin.PosNdc.y; v0.z <- vin.PosNdc.z; 
                //   v1.x <- vin.Tex.x; v1.y <- vin.Tex.y; 
                //   v2.x <- vin.Color.x; v2.y <- vin.Color.y; v2.z <- vin.Color.z; v2.w <- vin.Color.w; 
                //   o2.x <- <VS return value>.Color.x; o2.y <- <VS return value>.Color.y; o2.z <- <VS return value>.Color.z; o2.w <- <VS return value>.Color.w; 
                //   o1.x <- <VS return value>.Tex.x; o1.y <- <VS return value>.Tex.y; 
                //   o0.x <- <VS return value>.PosNdc.x; o0.y <- <VS return value>.PosNdc.y; o0.z <- <VS return value>.PosNdc.z; o0.w <- <VS return value>.PosNdc.w
                //
                #line 34 "C:\mydev\Editor\MyGame\FX\Sprite.fx"
                mov r0.xyz, v0.xyzx  // r0.x <- vout.PosNdc.x; r0.y <- vout.PosNdc.y; r0.z <- vout.PosNdc.z
                mov r0.w, l(1.000000)  // r0.w <- vout.PosNdc.w
                
                #line 35
                mov r1.xy, v1.xyxx  // r1.x <- vout.Tex.x; r1.y <- vout.Tex.y
                
                #line 36
                mov r2.xyzw, v2.xyzw  // r2.x <- vout.Color.x; r2.y <- vout.Color.y; r2.z <- vout.Color.z; r2.w <- vout.Color.w
                
                #line 38
                mov o0.xyzw, r0.xyzw
                mov o2.xyzw, r2.xyzw
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 8 instruction slots used
                            
            };
            HullShader = NULL;
            DomainShader = NULL;
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gSpriteTex                        texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosNdc.x; v0.y <- pin.PosNdc.y; v0.z <- pin.PosNdc.z; v0.w <- pin.PosNdc.w; 
                //   v1.x <- pin.Tex.x; v1.y <- pin.Tex.y; 
                //   v2.x <- pin.Color.x; v2.y <- pin.Color.y; v2.z <- pin.Color.z; v2.w <- pin.Color.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 43 "C:\mydev\Editor\MyGame\FX\Sprite.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
                mul o0.xyzw, r0.xyzw, v2.xyzw
                ret 
                // Approximately 3 instruction slots used
                            
            };
        }

    }

}

